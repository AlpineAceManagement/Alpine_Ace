----------------------------------------------------------
Create DB 
----------------------------------------------------------
DROP TABLE IF EXISTS osm_data CASCADE;
CREATE TABLE osm_data (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100),
    highway VARCHAR(100),
    oneway BOOLEAN,
    surface VARCHAR(100),
    source INTEGER,
    target INTEGER,
    the_geom GEOMETRY(LineString, 4326)
);




----------------------------------------------------------
Topologie erstellen und Tabelen Ã¤ndern
----------------------------------------------------------

DROP TABLE IF EXISTS osm_data_noded CASCADE;
DROP TABLE IF EXISTS osm_data_vertices_pgr CASCADE;
SELECT pgr_nodeNetwork ('osm_data',0.00001)
ALTER TABLE osm_data_noded ADD COLUMN name VARCHAR, ADD COLUMN type VARCHAR
SELECT pgr_createTopology ('osm_data_noded',0.00001);
UPDATE osm_data_noded AS new SET name=old.name, type=old.highway FROM osm_data as old WHERE new.old_id=old.id;
ALTER TABLE osm_data_noded ADD distance FLOAT;
UPDATE osm_data_noded SET distance =ST_Length(ST_Transform(the_geom, 4326)::geography)/1000;

----------------------------------------------------------
nearest_vertex SQL View mit Parameter
----------------------------------------------------------

SELECT
    v.id,
    v.the_geom
FROM
    osm_data_noded_vertices_pgr AS v,
    osm_data_noded AS e
WHERE 
    v.id = (
        SELECT
            id
        FROM 
            osm_data_noded_vertices_pgr
        ORDER BY 
            the_geom <-> ST_SetSRID(ST_MakePoint(%y_koord%, %x_koord%), 4326)
        LIMIT 1
    ) 
    AND (e.source = v.id OR e.target = v.id)
GROUP BY 
    v.id, v.the_geom

----------------------------------------------------------
nearest_vertex SQL View mit Koordinaten
----------------------------------------------------------

SELECT
    v.id,
    v.the_geom
FROM
    osm_data_noded_vertices_pgr AS v,
    osm_data_noded AS e
WHERE 
    v.id = (
        SELECT
            id
        FROM 
            osm_data_noded_vertices_pgr
        ORDER BY 
            the_geom <-> ST_SetSRID(ST_MakePoint('8.39160','47.46481'), 4326)
        LIMIT 1
    ) 
    AND (e.source = v.id OR e.target = v.id)
GROUP BY 
    v.id, v.the_geom
	
	
----------------------------------------------------------
shortest_path SQL View mit Parameter
----------------------------------------------------------

SELECT
 min(r.seq) AS seq,
 e.old_id AS id,
 e.name,
 e.type,
 sum(e.distance) AS distance,
ST_Collect(e.the_geom) AS geom 
 FROM pgr_dijkstra('SELECT id,source,target,distance AS cost 
 FROM osm_data_noded',%source%,%target%,false) AS r,osm_data_noded AS e 
 WHERE r.edge=e.id GROUP BY e.old_id,e.name,e.type
 
----------------------------------------------------------
shortest_path SQL View mit Start und Endpunkt
----------------------------------------------------------

geht in PG Admi nicht:

ERROR:  function pgr_dijkstra(unknown, unknown, unknown, boolean) is not unique
LINE 8:  FROM pgr_dijkstra('SELECT id,source,target,distance AS cost...
              ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.


