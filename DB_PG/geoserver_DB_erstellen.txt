DROP TABLE IF EXISTS Skidaten CASCADE;
DROP TABLE IF EXISTS Benutzerprofil CASCADE;
DROP TABLE IF EXISTS Prognose CASCADE;
DROP TABLE IF EXISTS Messdaten CASCADE;
DROP TABLE IF EXISTS Schneehoehe CASCADE;
DROP TABLE IF EXISTS Station CASCADE;
DROP TABLE IF EXISTS Parkplatz CASCADE;
DROP TABLE IF EXISTS OeV CASCADE;
DROP TABLE IF EXISTS Restaurant CASCADE;
DROP TABLE IF EXISTS Anlagen_Startpunkt CASCADE;
DROP TABLE IF EXISTS Anlagen_Endpunkt CASCADE;
DROP TABLE IF EXISTS Anlagen CASCADE;
DROP TABLE IF EXISTS Pisten_Endpunkt CASCADE;
DROP TABLE IF EXISTS Pisten_Startpunkt CASCADE;
DROP TABLE IF EXISTS Pisten CASCADE;
DROP TABLE IF EXISTS Skigebiet CASCADE;
--Postgis Extension für postgis_db erstellen
DO $$ 
BEGIN 
    BEGIN 
        CREATE EXTENSION IF NOT EXISTS postgis; 
    EXCEPTION WHEN duplicate_object THEN 
        RAISE NOTICE 'PostGIS extension already exists'; 
    END; 
END $$;


CREATE TABLE IF NOT EXISTS Skigebiet (
    Skigebiet_ID SERIAL PRIMARY KEY,
    SG_Name VARCHAR(100) NOT NULL,
    SG_Flaeche GEOMETRY(MULTIPOLYGON, 2056) --MULTIPOLYGON, braucht es wegen Skigebiet: Andermatt+Disentis+Sedrun, Sulden am Ortler - Solda al Ortles,Cima Piazzi – San Colombano,Monterosa Ski,Le Grand Massif,Villages	

);

	
DO $$
BEGIN
    BEGIN
        CREATE TYPE FARBE AS ENUM ('Blau', 'Rot', 'Schwarz');
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE 'Typ FARBE existiert bereits';
    END;
END $$;
CREATE TABLE IF NOT EXISTS Pisten(
	Piste_ID INTEGER PRIMARY KEY,  -- wechseln zu Interger
	P_Name VARCHAR(50),
	P_Nummer VARCHAR(5),
	P_Farbe FARBE,
	P_Status BOOL,
	P_Geometrie GEOMETRY(LINESTRING, 2056) NOT NULL,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);
	
CREATE TABLE IF NOT EXISTS Pisten_Startpunkt(
	Pisten_Startkoordinaten GEOMETRY(POINT, 2056),
	Piste_ID INTEGER REFERENCES Pisten(Piste_ID)
	);
	
CREATE TABLE IF NOT EXISTS Pisten_Endpunkt(
	Pisten_Endkoordinaten GEOMETRY(POINT, 2056),
	Piste_ID INTEGER REFERENCES Pisten(Piste_ID)
	);
	
CREATE TABLE IF NOT EXISTS Anlagen(
	Anlage_ID INTEGER PRIMARY KEY,
	A_Name VARCHAR(100),
	A_Hoehe FLOAT NOT NULL,
	A_Status BOOL,
	A_Geometrie GEOMETRY(LINESTRING, 2056) NOT NULL,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);
	
CREATE TABLE IF NOT EXISTS Anlagen_Startpunkt(
	Anlagen_Startkoordinaten GEOMETRY(POINT, 2056),
	Anlage_ID INTEGER REFERENCES Anlagen(Anlage_ID)
	);
	
CREATE TABLE IF NOT EXISTS Anlagen_Endpunkt(
	Anlagen_Endkoordinaten GEOMETRY(POINT, 2056),
	Anlage_ID INTEGER REFERENCES Anlagen(Anlage_ID)
	);
	
CREATE TABLE Restaurant (
    Restaurant_ID SERIAL PRIMARY KEY,
    R_Name VARCHAR(50) NOT NULL,
    R_Geometry GEOMETRY(POINT, 2056) NOT NULL,
    R_Oeffnungszeiten TEXT,
    R_Telefon CHAR(15),
    R_Email VARCHAR(50),
    R_Webseite TEXT,
	R_Dateipfad_Bildname TEXT,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
);
	
CREATE TABLE IF NOT EXISTS OeV(
	OeV_ID Integer PRIMARY KEY,
	O_Name TEXT NOT NULL,
	O_Geometrie GEOMETRY(POINT, 2056) NOT NULL,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);
	
CREATE TABLE IF NOT EXISTS Parkplatz(
	Parkplatz_ID INTEGER PRIMARY KEY,
	PP_Name Text NOT NULL,
	PP_Geometrie GEOMETRY(POINT, 2056) NOT NULL,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);
	
CREATE TABLE IF NOT EXISTS Station(
	Station_ID VARCHAR(4) PRIMARY KEY,
	S_Name TEXT NOT NULL,
	S_Geometrie GEOMETRY(POINT, 2056) NOT NULL,
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);
	
DO $$
BEGIN
    BEGIN
        CREATE TYPE WETTER AS ENUM ('sonnig', 'bewölkt', 'regnerisch', 'windig', 'schneereich');
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE 'Typ WETTER existiert bereits';
    END;
    
    BEGIN
        CREATE TYPE RICHTUNG AS ENUM ('Nord', 'Nord-Ost', 'Ost', 'Sued-Ost', 'Sued', 'Sued-West', 'West', 'Nord-West');
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE 'Typ RICHTUNG existiert bereits';
    END;
END $$;
CREATE TABLE IF NOT EXISTS Messdaten(
	Messdaten_ID SERIAL PRIMARY KEY,
	MD_TimeStamp TIMESTAMP NOT NULL,
	MD_Wetter WETTER NOT NULL,
	MD_Windgeschwindigkeit FLOAT,
	MD_Windrichtung RICHTUNG,
	MD_Niederschlage FLOAT,
	MD_Druck FLOAT NOT NULL,
	MD_Temperatur FLOAT NOT NULL,
	Station_ID VARCHAR(4) REFERENCES Station(Station_ID)
	);
	
CREATE TABLE IF NOT EXISTS Schneehoehe(
	Schneehoehe_ID SERIAL NOT NULL,
	SH_Zeit TIMESTAMP NOT NULL,
	SH_Hoehe FLOAT NOT NULL,
	Station_ID VARCHAR(4) REFERENCES Station(Station_ID)
	);
	
CREATE TABLE IF NOT EXISTS Prognose(
	Prognose_ID SERIAL PRIMARY KEY,
	PG_Datum TIMESTAMP NOT NULL,
	PG_Wetter WETTER NOT NULL,
	PG_Windgeschwindigkeit FLOAT,
	PG_Windrichtung RICHTUNG,
	PG_Niederschlage FLOAT,
	PG_Niederschlagswahrscheinlichkeit FLOAT,
	PG_Druck FLOAT NOT NULL,
	PG_Temperatur FLOAT NOT NULL,
	PG_Cloud_Cover FLOAT NULL,
	Station_ID VARCHAR(4) REFERENCES Station(Station_ID)
	);
	
DO $$
BEGIN
    BEGIN
        CREATE TYPE GESCHLECHT AS ENUM('Mann', 'Frau', 'Anders');
    EXCEPTION WHEN duplicate_object THEN
        RAISE NOTICE 'Typ GESCHLECHT existiert bereits';
    END;
END $$;

CREATE TABLE IF NOT EXISTS Benutzerprofil(
	Benutzername VARCHAR(50) PRIMARY KEY,
	B_Name VARCHAR(50) NOT NULL,
	B_Vorname VARCHAR(50) NOT NULL,
	B_Jahrgang INTEGER NOT NULL,
	B_Geschlecht GESCHLECHT NOT NULL,
	B_Email VARCHAR(50) NOT NULL,
	B_Telefon CHAR(10) NOT NULL,
	B_Passwort VARCHAR(50) NOT NULL
	);

CREATE TABLE IF NOT EXISTS Skidaten(
	Skidaten_ID SERIAL PRIMARY KEY,
	SD_Hoehenmeter FLOAT,
	SD_Distanz FLOAT,
	SD_Dauer TIME NOT NULL,
	SD_Geschwindigkeit FLOAT,
	SD_MaxGeschwindigkeit FLOAT,
	SD_Geometrie GEOMETRY(LINESTRING, 2056) NOT NULL,
	Benutzername VARCHAR(50) REFERENCES Benutzerprofil(Benutzername),
	Skigebiet_ID INTEGER REFERENCES Skigebiet(Skigebiet_ID)
	);